import telebot
from telebot import types
import sqlite3
import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
API_TOKEN = '7187174773:AAF-3yyj0MLC3fc1_1gw7dap86JLxtMBq3M'
bot = telebot.TeleBot(API_TOKEN)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('health_bot.db', check_same_thread=False)
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    user_id INTEGER UNIQUE,
    name TEXT,
    weight REAL,
    water_norm REAL
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS food (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    food TEXT,
    timestamp TEXT,
    date TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS water (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    amount INTEGER,
    timestamp TEXT,
    date TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

cursor.execute('''
CREATE TABLE IF NOT EXISTS weight_history (
    id INTEGER PRIMARY KEY,
    user_id INTEGER,
    weight REAL,
    timestamp TEXT,
    FOREIGN KEY(user_id) REFERENCES users(user_id)
)
''')

conn.commit()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_states = {}

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏
@bot.message_handler(commands=['help'])
def help_command(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    keyboard.add(
        types.KeyboardButton("/register"),
        types.KeyboardButton("/add_food"),
        types.KeyboardButton("/add_water"),
        types.KeyboardButton("/stats"),
        types.KeyboardButton("/change_weight"),
        types.KeyboardButton("/calculate_glasses")
    )
    help_text = (
        "/register - –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–≤–æ—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é\n–≠—Ç—É –∫–Ω–æ–ø–∫—É –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –∏ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è ü•∞\n\n"
        "/add\_food - –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –µ–¥–µ (–∞ –∏–º–µ–Ω–Ω–æ —á—Ç–æ —Ç—ã –∫—É—à–∞–ª –∏ –ø–∏–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∑–∞–ø–∏—Å–∫–∏)\n\n"
        "–ü—Ä–∏–º–µ—Ä:\n\n _–ü–æ–∫—É—à–∞–ª –±—É—Ç–µ—Ä—ã –∏ –≤—ã–ø–∏–ª —á–∞—é_ \n\n üëá–ó–∞–ø–∏—Å–∏ –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∏–∂–µ –≤ –ø—É–Ω–∫—Ç–µ –í–æ–¥–∞\n\n"
        "/add\_water - –Ω–∞–∂–∞–≤ –Ω–∞ —ç—Ç—É –∫–Ω–æ–ø–∫—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –æ –≤—ã–ø–∏—Ç–æ–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤–æ–¥–µ\n\n"
        "/stats - –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ–±—è –∏ –º–µ–Ω—è üòò\n\n"
        "/change\_weight - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å —Å–≤–æ–π –≤–µ—Å –∏ –±–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤–æ–¥—ã —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø–∏—Ç—å –≤ –¥–µ–Ω—å –∏ –∑–∞–Ω–µ—Å—ë—Ç —Ç–≤–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤–µ—Å–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–º–æ–∂–µ—à—å —Å–º–æ—Ç—Ä–µ—Ç—å –≤ stats\n\n"
        "/calculate\_glasses - —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—ã —Å–º–æ–∂–µ—à—å –ø–æ—Å—Ç–∏—Ç–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã ‚ù§Ô∏è"
    )
    bot.send_message(message.chat.id, help_text, reply_markup=keyboard, parse_mode="Markdown")

# –ö–æ–º–∞–Ω–¥–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@bot.message_handler(commands=['register'])
def register(message):
    user_states[message.from_user.id] = {'state': 'REGISTER_NAME'}
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')

def handle_registration(message):
    user_id = message.from_user.id
    if user_states[user_id]['state'] == 'REGISTER_NAME':
        user_states[user_id]['name'] = message.text
        user_states[user_id]['state'] = 'REGISTER_WEIGHT'
        bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å (–∫–≥):')
    elif user_states[user_id]['state'] == 'REGISTER_WEIGHT':
        name = user_states[user_id]['name']
        weight = float(message.text)
        water_norm = weight * 30

        cursor.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        user = cursor.fetchone()
        if user:
            bot.reply_to(message, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
        else:
            cursor.execute('INSERT INTO users (user_id, name, weight, water_norm) VALUES (?, ?, ?, ?)', (user_id, name, weight, water_norm))
            conn.commit()
            bot.reply_to(message, f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –í–∞—à–∞ –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {water_norm} –º–ª –≤ –¥–µ–Ω—å.')
        del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –µ–¥—ã
@bot.message_handler(commands=['add_food'])
def add_food(message):
    user_states[message.from_user.id] = {'state': 'ADD_FOOD'}
    bot.reply_to(message, '–ß—Ç–æ –≤—ã —Å–∫—É—à–∞–ª–∏?')

def handle_food(message):
    user_id = message.from_user.id
    food = message.text
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    date = datetime.datetime.now().strftime('%Y-%m-%d')

    cursor.execute('INSERT INTO food (user_id, food, timestamp, date) VALUES (?, ?, ?, ?)', (user_id, food, timestamp, date))
    conn.commit()
    bot.reply_to(message, '–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞.')
    del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–æ–¥—ã
@bot.message_handler(commands=['add_water'])
def add_water(message):
    user_states[message.from_user.id] = {'state': 'ADD_WATER'}
    bot.reply_to(message, '–°–∫–æ–ª—å–∫–æ –º–∏–ª–ª–∏–ª–∏—Ç—Ä–æ–≤ –≤–æ–¥—ã –≤—ã –≤—ã–ø–∏–ª–∏?')

def handle_water(message):
    user_id = message.from_user.id
    amount = int(message.text)
    timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    date = datetime.datetime.now().strftime('%Y-%m-%d')

    cursor.execute('INSERT INTO water (user_id, amount, timestamp, date) VALUES (?, ?, ?, ?)', (user_id, amount, timestamp, date))
    conn.commit()

    cursor.execute('SELECT SUM(amount) FROM water WHERE user_id = ? AND date = ?', (user_id, date))
    total_water = cursor.fetchone()[0]

    cursor.execute('SELECT water_norm FROM users WHERE user_id = ?', (user_id,))
    water_norm = cursor.fetchone()[0]

    remaining = water_norm - total_water

    bot.reply_to(message, f'–ó–∞–ø–∏—Å—å –¥–æ–±–∞–≤–ª–µ–Ω–∞. –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –Ω–æ—Ä–º—ã: {remaining} –º–ª.')
    del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ —Å–º–µ–Ω—ã –≤–µ—Å–∞
@bot.message_handler(commands=['change_weight'])
def change_weight(message):
    user_states[message.from_user.id] = {'state': 'CHANGE_WEIGHT'}
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–µ—Å (–∫–≥):')

def handle_change_weight(message):
    user_id = message.from_user.id
    if user_states[user_id]['state'] == 'CHANGE_WEIGHT':
        new_weight = float(message.text)
        new_water_norm = new_weight * 30

        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞
        timestamp = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        cursor.execute('INSERT INTO weight_history (user_id, weight, timestamp) VALUES (?, ?, ?)', (user_id, new_weight, timestamp))
        conn.commit()

        # –ü–æ–ª—É—á–∞–µ–º —É–∂–µ –≤—ã–ø–∏—Ç—É—é –≤–æ–¥—É –∑–∞ —Å–µ–≥–æ–¥–Ω—è
        date = datetime.datetime.now().strftime('%Y-%m-%d')
        cursor.execute('SELECT SUM(amount) FROM water WHERE user_id = ? AND date = ?', (user_id, date))
        total_water = cursor.fetchone()[0] or 0

        # –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à—É—é—Å—è –Ω–æ—Ä–º—É –≤–æ–¥—ã
        remaining_water = new_water_norm - total_water

        cursor.execute('UPDATE users SET weight = ?, water_norm = ? WHERE user_id = ?', (new_weight, new_water_norm, user_id))
        conn.commit()
        bot.reply_to(message, f'–í–∞—à –≤–µ—Å –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–æ–≤–∞—è –Ω–æ—Ä–º–∞ –≤–æ–¥—ã: {new_water_norm} –º–ª –≤ –¥–µ–Ω—å. –û—Å—Ç–∞—Ç–æ–∫ –æ—Ç –Ω–æ—Ä–º—ã: {remaining_water} –º–ª.')
        del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã
@bot.message_handler(commands=['calculate_glasses'])
def calculate_glasses(message):
    user_states[message.from_user.id] = {'state': 'CALCULATE_GLASSES'}
    bot.reply_to(message, '–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤–∞—à–µ–≥–æ —Å—Ç–∞–∫–∞–Ω–∞ (–º–ª):')

def handle_calculate_glasses(message):
    user_id = message.from_user.id
    if user_states[user_id]['state'] == 'CALCULATE_GLASSES':
        glass_volume = float(message.text)

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ—Ä–º—É –≤–æ–¥—ã –∏ –æ—Å—Ç–∞–≤—à–∏–π—Å—è –æ–±—ä–µ–º –≤–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
        date = datetime.datetime.now().strftime('%Y-%m-%d')
        cursor.execute('SELECT SUM(amount) FROM water WHERE user_id = ? AND date = ?', (user_id, date))
        total_water = cursor.fetchone()[0] or 0

        cursor.execute('SELECT water_norm FROM users WHERE user_id = ?', (user_id,))
        water_norm = cursor.fetchone()[0]

        remaining_water = water_norm - total_water

        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–∫–∞–Ω–æ–≤
        if remaining_water > 0:
            number_of_glasses = remaining_water / glass_volume
            bot.reply_to(message, f'–í–∞–º –Ω—É–∂–Ω–æ –≤—ã–ø–∏—Ç—å {number_of_glasses:.2f} —Å—Ç–∞–∫–∞–Ω–æ–≤ –≤–æ–¥—ã –ø–æ {glass_volume} –º–ª.')
        else:
            bot.reply_to(message, '–í—ã —É–∂–µ –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–≤–æ–µ–π –Ω–æ—Ä–º—ã –≤–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.')

        del user_states[user_id]

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@bot.message_handler(commands=['stats'])
def stats(message):
    cursor.execute('SELECT name FROM users')
    users = cursor.fetchall()

    keyboard = types.InlineKeyboardMarkup(row_width=1)
    for user in users:
        keyboard.add(types.InlineKeyboardButton(text=user[0], callback_data=f'stats_{user[0]}'))
    bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data.startswith('stats_'))
def stats_user(call):
    stats_name = call.data[len('stats_'):]
    user_id = call.from_user.id
    user_states[user_id] = {'state': 'STATS_PERIOD', 'stats_name': stats_name}

    keyboard = types.InlineKeyboardMarkup(row_width=3)
    keyboard.add(
        types.InlineKeyboardButton(text="–î–µ–Ω—å", callback_data='day'),
        types.InlineKeyboardButton(text="–ù–µ–¥–µ–ª—è", callback_data='week'),
        types.InlineKeyboardButton(text="–ú–µ—Å—è—Ü", callback_data='month')
    )
    bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {stats_name}. –ó–∞ –∫–∞–∫–æ–π –ø–µ—Ä–∏–æ–¥ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É?', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data in ['day', 'week', 'month'])
def stats_period(call):
    period = call.data
    user_id = call.from_user.id
    stats_name = user_states[user_id]['stats_name']

    cursor.execute('SELECT user_id FROM users WHERE name = ?', (stats_name,))
    stats_user_id = cursor.fetchone()[0]

    now = datetime.datetime.now()
    if period == 'day':
        start_date = now.strftime('%Y-%m-%d')
    elif period == 'week':
        start_date = (now - datetime.timedelta(days=7)).strftime('%Y-%m-%d')
    elif period == 'month':
        start_date = (now - datetime.timedelta(days=30)).strftime('%Y-%m-%d')

    cursor.execute(f'''
        SELECT food, timestamp FROM food WHERE user_id = ? AND date >= ?
    ''', (stats_user_id, start_date))
    food_stats = cursor.fetchall()

    cursor.execute(f'''
        SELECT amount, timestamp FROM water WHERE user_id = ? AND date >= ?
    ''', (stats_user_id, start_date))
    water_stats = cursor.fetchall()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤–µ—Å–∞ –∏ –Ω–æ—Ä–º—ã –≤–æ–¥—ã
    cursor.execute('SELECT weight, water_norm FROM users WHERE user_id = ?', (stats_user_id,))
    weight, water_norm = cursor.fetchone()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —É–∂–µ –≤—ã–ø–∏—Ç–æ–π –≤–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è
    today_date = datetime.datetime.now().strftime('%Y-%m-%d')
    cursor.execute('SELECT SUM(amount) FROM water WHERE user_id = ? AND date = ?', (stats_user_id, today_date))
    total_water_today = cursor.fetchone()[0] or 0

    remaining_water_today = water_norm - total_water_today

    food_entries = '\n'.join([f'{timestamp}: {food}' for food, timestamp in food_stats])
    water_entries = '\n'.join([f'{timestamp}: {amount} –º–ª' for amount, timestamp in water_stats])
    food_count = len(food_stats)
    water_count = len(water_stats)
    total_water_amount = sum([amount for amount, timestamp in water_stats])

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –≤–µ—Å–∞
    cursor.execute(f'''
        SELECT weight, timestamp FROM weight_history WHERE user_id = ? AND timestamp >= ?
    ''', (stats_user_id, start_date))
    weight_history = cursor.fetchall()
    weight_history_entries = '\n'.join([f'{timestamp}: {weight} –∫–≥' for weight, timestamp in weight_history])

    stats_text = (f'–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è {stats_name} –∑–∞ –ø–µ—Ä–∏–æ–¥ {period}:\n\n'
                  f'–ï–¥–∞ {food_count} –ø—Ä–∏–µ–º(–∞/–æ–≤):\n{food_entries}\n\n'
                  f'–í–æ–¥–∞ {water_count} –ø—Ä–∏–µ–º(–∞/–æ–≤):\n{water_entries}\n\n'
                  f'–í—Å–µ–≥–æ –≤–æ–¥—ã –≤—ã–ø–∏—Ç–æ: {total_water_amount} –º–ª\n'
                  f'–û—Å—Ç–∞—Ç–æ–∫ –≤–æ–¥—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è: {remaining_water_today} –º–ª\n\n'
                  f'–¢–µ–∫—É—â–∏–π –≤–µ—Å: {weight} –∫–≥\n\n'
                  f'–ò—Å—Ç–æ—Ä–∏—è –≤–µ—Å–∞:\n{weight_history_entries}')

    bot.send_message(call.message.chat.id, stats_text)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: message.from_user.id in user_states)
def handle_state(message):
    user_id = message.from_user.id
    if 'state' in user_states[user_id]:
        state = user_states[user_id]['state']
        if state == 'REGISTER_NAME' or state == 'REGISTER_WEIGHT':
            handle_registration(message)
        elif state == 'ADD_FOOD':
            handle_food(message)
        elif state == 'ADD_WATER':
            handle_water(message)
        elif state == 'CHANGE_WEIGHT':
            handle_change_weight(message)
        elif state == 'CALCULATE_GLASSES':
            handle_calculate_glasses(message)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
